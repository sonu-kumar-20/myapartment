<% layout("/layouts/boilerplate") -%>

<div class="container mt-4">

  <p><strong style="color: rgb(230, 26, 26);">Listing:</strong> <%= listing.title %></p>

  <h5 style="color: rgb(24, 25, 23);">
    <%= otherUser.username %> 
    <span id="userStatus" style="font-weight: normal; font-size: 0.9rem; color: red;">(Offline)</span>
  </h5>

  <!-- Bulk Delete Button -->
  <div id="bulkActions" style="display: none; margin-bottom: 10px;">
    <button id="deleteSelected" class="btn btn-danger btn-sm">üóëÔ∏è Delete Selected</button>
  </div>

  <div class="chat-box" style="border: 1px solid #ccc; padding: 1rem; height: 300px; overflow-y: scroll; background-color: #f8f9fa;">
    <% if (messages.length === 0) { %>
      <p class="text-muted">No messages yet. Start the conversation!</p>
    <% } else { %>
      <% messages.forEach(msg => {
           const isOwnMessage = String(msg.sender._id) === String(currentUser._id);
      %>
        <div class="d-flex <%= isOwnMessage ? 'justify-content-end' : 'justify-content-start' %>">
          <div class="p-2 mb-2 rounded message-bubble"
               data-message-id="<%= msg._id %>"
               style="max-width: 70%;
                      background-color: <%= isOwnMessage ? '#d1e7dd' : '#f8d7da' %>;
                      word-wrap: break-word;
                      cursor: pointer;">
            <div><%= msg.content %></div>
            <div class="text-end text-muted" style="font-size: 0.75rem;">
              <%= new Date(msg.timestamp).toLocaleString('en-IN', { hour12: true }) %>
            </div>
          </div>
        </div>
      <% }) %>
    <% } %>
  </div>

  <div id="typingIndicator" class="text-muted" style="height: 20px; margin-bottom: 5px; font-style: italic;"></div>

  <form id="chatForm" class="mt-3" method="POST" action="/chat/<%= listing._id %>/<%= otherUser._id %>">
    <div class="input-group">
      <input type="text" name="message" id="messageInput" class="form-control" placeholder="Type your message..." autocomplete="off" required />
      <button class="btn btn-primary">Send</button>
    </div>
  </form>
</div>

<script>
  const socket = io();
  const chatBox = document.querySelector('.chat-box');
  const roomId = "<%= listing._id %>-<%= [currentUser._id, otherUser._id].sort().join('-') %>";
  const currentUserId = "<%= currentUser._id %>";
  const otherUserId = "<%= otherUser._id %>";
  const chatForm = document.getElementById("chatForm");
  const messageInput = document.getElementById("messageInput");
  const typingIndicator = document.getElementById("typingIndicator");
  const userStatus = document.getElementById("userStatus");
  const bulkActions = document.getElementById("bulkActions");
  const deleteBtn = document.getElementById("deleteSelected");
  const selectedMessages = new Set();

  chatBox.scrollTop = chatBox.scrollHeight;

  socket.emit("joinRoom", { roomId, userId: currentUserId });
  socket.emit("checkOnlineStatus", otherUserId);

  let typingTimeout;
  messageInput.addEventListener("input", () => {
    socket.emit("typing", { roomId, userId: currentUserId });
    clearTimeout(typingTimeout);
    typingTimeout = setTimeout(() => {
      socket.emit("stopTyping", { roomId, userId: currentUserId });
    }, 1000);
  });

  chatForm.addEventListener("submit", function (e) {
    e.preventDefault();
    const message = messageInput.value.trim();
    if (!message) return;

    fetch(chatForm.action, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: `message=${encodeURIComponent(message)}`
    });

    messageInput.value = "";
    socket.emit("stopTyping", { roomId, userId: currentUserId });
  });

  socket.on("message", (data) => {
    const isOwn = data.senderId === currentUserId;

    const wrapper = document.createElement("div");
    wrapper.className = `d-flex ${isOwn ? 'justify-content-end' : 'justify-content-start'}`;

    const messageBubble = document.createElement("div");
    messageBubble.className = "p-2 mb-2 rounded message-bubble";
    messageBubble.dataset.messageId = data._id;
    messageBubble.style.maxWidth = "70%";
    messageBubble.style.wordWrap = "break-word";
    messageBubble.style.backgroundColor = isOwn ? "#d1e7dd" : "#f8d7da";
    messageBubble.style.cursor = "pointer";

    const content = document.createElement("div");
    content.innerText = data.content;

    const timestamp = document.createElement("div");
    timestamp.className = "text-end text-muted";
    timestamp.style.fontSize = "0.75rem";
    timestamp.innerText = data.timestamp;

    messageBubble.appendChild(content);
    messageBubble.appendChild(timestamp);
    wrapper.appendChild(messageBubble);
    chatBox.appendChild(wrapper);
    chatBox.scrollTop = chatBox.scrollHeight;
  });

  socket.on("typing", (typingUserId) => {
    if (typingUserId !== currentUserId) {
      typingIndicator.innerText = "Typing...";
    }
  });

  socket.on("stopTyping", (typingUserId) => {
    if (typingUserId !== currentUserId) {
      typingIndicator.innerText = "";
    }
  });

  socket.on("userOnline", (userId) => {
    if (userId === otherUserId) {
      userStatus.innerText = "(Online)";
      userStatus.style.color = "green";
    }
  });

  socket.on("userOffline", (userId) => {
    if (userId === otherUserId) {
      userStatus.innerText = "(Offline)";
      userStatus.style.color = "red";
    }
  });

  // ================================
  // ‚úÖ MULTI-SELECT DELETE SUPPORT
  // ================================
  chatBox.addEventListener('click', (e) => {
    const bubble = e.target.closest('.message-bubble');
    if (!bubble) return;

    const msgId = bubble.dataset.messageId;
    if (!msgId || msgId === "undefined") return;

    if (selectedMessages.has(msgId)) {
      selectedMessages.delete(msgId);
      bubble.style.border = "none";
    } else {
      selectedMessages.add(msgId);
      bubble.style.border = "2px solid red";
    }

    bulkActions.style.display = selectedMessages.size > 0 ? "block" : "none";
  });

  deleteBtn.addEventListener("click", async () => {
    if (selectedMessages.size === 0) return;

    const confirmed = confirm(`Delete ${selectedMessages.size} message(s)?`);
    if (!confirmed) return;

    const res = await fetch(`/chat/delete-messages`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ messageIds: Array.from(selectedMessages) })
    });

    const result = await res.json();

    if (res.ok && result.success) {
      selectedMessages.forEach(id => {
        const el = document.querySelector(`[data-message-id="${CSS.escape(id)}"]`);
        if (el) el.closest(".d-flex").remove();
      });
      selectedMessages.clear();
      bulkActions.style.display = "none";
    } else {
      alert("Failed to delete messages.");
    }
  });
</script>
